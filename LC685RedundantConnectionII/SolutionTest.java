package LC685RedundantConnectionII;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class SolutionTest {
    private final Solution solution = new Solution();

    @Test
    void findRedundantDirectedConnection() {
        int[][] edges = new int[][]{
                {1, 2},
                {1, 3},
                {2, 3},
        };
        int[] expected = new int[]{2, 3};
        int[] result = solution.findRedundantDirectedConnection(edges);
        System.out.println("result" + result[0] + result[1]);
        assertArrayEquals(expected, result);
    }

    @Test
    void findRedundantDirectedConnection2() {
        int[][] edges = new int[][]{
                {1, 2},
                {2, 3},
                {3, 4},
                {4, 1},
                {1, 5},
        };
        int[] expected = new int[]{4, 1};
        int[] result = solution.findRedundantDirectedConnection(edges);
        assertArrayEquals(expected, result);
    }

    @Test
    void findRedundantDirectedConnection3() {
        int[][] edges = new int[][]{
                {2, 1},
                {3, 1},
                {4, 2},
                {1, 4}
        };
        int[] expected = new int[]{2, 1};
        int[] result = solution.findRedundantDirectedConnection(edges);
        assertArrayEquals(expected, result);
    }

    @Test
    void findRedundantDirectedConnection4() {
        int[][] edges = new int[][]{
                {4, 2},
                {1, 5},
                {5, 2},
                {5, 3},
                {2, 4}
        };
        int[] expected = new int[]{4, 2};
        int[] result = solution.findRedundantDirectedConnection(edges);
        assertArrayEquals(expected, result);
    }

    @Test
    void findRedundantDirectedConnection5() {
        int[][] edges = new int[][]{
                {2, 3},
                {3, 1},
                {3, 4},
                {4, 2}
        };
        int[] expected = new int[]{4, 2};
        int[] result = solution.findRedundantDirectedConnection(edges);
        assertArrayEquals(expected, result);
    }

    @Test
    void findRedundantDirectedConnection6() {
        int[][] edges = new int[][]{
                {775,279},{66,21},{519,15},{231,841},{363,31},{109,1000},{739,952},{386,940},{103,772},{555,768},{502,191},{601,859},{100,977},{526,546},{142,631},{235,156},{73,670},{288,522},{775,211},{956,273},{970,933},{625,996},{814,366},{212,787},{689,356},{542,94},{98,838},{405,705},{667,327},{551,552},{785,192},{615,161},{639,649},{715,73},{499,92},{619,665},{893,820},{645,925},{819,276},{218,780},{888,791},{691,30},{112,250},{322,613},{653,664},{192,137},{199,972},{859,221},{268,867},{167,886},{140,56},{295,440},{797,58},{899,794},{68,948},{824,564},{761,130},{834,550},{946,594},{658,410},{631,712},{305,898},{741,363},{580,133},{832,557},{769,548},{594,507},{865,982},{397,206},{369,910},{912,503},{576,389},{944,303},{261,607},{767,471},{420,225},{964,226},{486,521},{537,887},{275,693},{890,274},{379,997},{167,563},{994,247},{94,751},{481,937},{750,913},{260,824},{483,461},{846,173},{63,482},{451,569},{57,646},{355,666},{37,121},{598,49},{132,988},{592,928},{547,289},{585,970},{678,7},{776,749},{527,347},{834,622},{973,159},{873,924},{792,107},{623,698},{491,639},{880,605},{103,232},{129,856},{873,830},{523,193},{215,555},{985,627},{730,491},{336,785},{500,195},{906,131},{51,763},{189,667},{516,125},{676,174},{937,748},{571,531},{991,634},{322,333},{5,90},{560,155},{818,321},{492,868},{52,659},{992,583},{31,936},{770,189},{837,577},{161,75},{306,812},{796,134},{520,826},{389,991},{502,335},{125,747},{888,813},{675,204},{503,196},{940,3},{63,91},{617,449},{336,756},{257,10},{837,960},{837,383},{328,311},{262,585},{255,404},{319,513},{635,880},{362,674},{893,549},{771,150},{818,533},{350,262},{47,424},{705,870},{810,378},{362,200},{175,246},{576,467},{499,93},{246,426},{568,587},{604,458},{390,151},{323,809},{593,965},{691,484},{403,415},{401,114},{466,391},{823,263},{905,576},{637,233},{121,727},{489,504},{853,180},{749,620},{959,235},{546,172},{173,624},{191,601},{981,291},{81,946},{906,422},{520,219},{335,650},{35,216},{986,488},{101,227},{931,968},{990,339},{183,47},{112,599},{53,514},{458,801},{95,252},{964,911},{953,388},{541,604},{933,434},{373,515},{542,241},{841,302},{862,181},{133,435},{396,222},{797,655},{131,284},{991,34},{797,759},{67,769},{171,630},{137,280},{382,396},{431,873},{244,505},{464,971},{223,510},{191,162},{882,752},{615,237},{746,51},{46,837},{119,306},{595,277},{743,354},{782,677},{245,360},{274,337},{839,271},{958,547},{874,288},{253,345},{935,760},{577,511},{812,483},{524,355},{958,545},{967,508},{105,539},{678,529},{746,437},{581,987},{607,974},{235,745},{592,83},{370,736},{794,466},{606,178},{462,551},{174,696},{816,689},{679,733},{588,266},{448,775},{731,895},{155,41},{480,429},{342,229},{944,381},{963,574},{722,918},{812,349},{707,99},{726,115},{257,640},{368,938},{322,198},{96,720},{938,358},{87,973},{13,243},{217,421},{819,582},{729,258},{186,416},{644,578},{63,890},{913,788},{370,401},{332,427},{25,956},{234,414},{800,111},{159,922},{539,322},{988,530},{201,375},{791,765},{698,758},{700,770},{37,428},{886,213},{819,617},{394,129},{298,275},{727,735},{452,623},{113,953},{290,202},{918,359},{950,822},{123,283},{280,158},{169,833},{30,901},{120,520},{366,567},{378,807},{651,489},{192,323},{247,669},{266,942},{325,761},{700,116},{6,729},{824,931},{920,932},{953,44},{64,452},{632,852},{979,19},{565,899},{280,487},{26,223},{874,943},{920,703},{190,506},{984,18},{143,609},{197,123},{318,927},{320,694},{69,373},{870,818},{50,848},{124,626},{57,958},{698,86},{233,884},{858,52},{914,558},{724,726},{196,39},{434,846},{316,386},{798,806},{826,20},{488,408},{563,348},{56,764},{435,766},{932,270},{400,464},{77,648},{191,993},{340,98},{107,935},{20,586},{37,141},{582,470},{582,804},{499,651},{476,517},{117,343},{616,171},{709,985},{953,453},{105,13},{275,490},{577,881},{485,854},{774,816},{25,69},{14,628},{405,849},{1,214},{131,281},{856,593},{363,661},{182,721},{199,317},{573,863},{542,754},{98,139},{965,68},{812,344},{89,644},{442,492},{658,148},{787,108},{807,853},{186,798},{185,297},{277,442},{752,771},{204,843},{879,477},{323,744},{75,361},{603,201},{976,190},{19,336},{755,228},{631,616},{468,397},{914,476},{806,904},{442,329},{594,912},{714,817},{393,188},{550,951},{197,657},{384,342},{619,746},{396,448},{682,540},{960,95},{514,285},{859,313},{37,164},{363,568},{417,876},{172,26},{338,325},{717,267},{555,444},{67,230},{162,413},{300,534},{49,245},{786,217},{752,750},{338,908},{643,805},{461,486},{648,641},{915,112},{973,967},{307,865},{696,842},{593,480},{411,82},{311,811},{200,62},{88,945},{835,905},{232,431},{543,463},{85,519},{662,59},{887,847},{248,24},{857,140},{119,340},{446,84},{897,570},{711,690},{775,695},{769,33},{591,407},{144,209},{285,814},{168,738},{638,909},{562,581},{646,741},{469,234},{972,251},{965,97},{237,969},{358,949},{329,63},{450,132},{226,541},{775,367},{716,777},{201,253},{847,658},{352,629},{202,197},{604,14},{452,472},{63,680},{789,324},{580,900},{271,242},{397,654},{808,571},{604,954},{380,451},{672,957},{100,301},{707,85},{266,502},{248,647},{778,50},{296,364},{732,566},{643,8},{352,32},{578,633},{642,88},{662,168},{366,642},{323,947},{608,117},{105,728},{890,79},{926,60},{945,983},{302,320},{309,902},{753,474},{937,524},{720,989},{934,286},{630,459},{426,264},{994,915},{267,380},{218,526},{972,87},{130,894},{377,883},{343,792},{322,418},{115,700},{800,326},{989,914},{751,802},{755,875},{122,77},{66,376},{536,244},{622,716},{318,70},{576,815},{744,990},{739,840},{115,610},{3,877},{307,538},{408,916},{270,128},{121,579},{894,48},{716,118},{186,923},{23,334},{609,711},{358,409},{854,724},{227,497},{342,575},{741,72},{336,699},{263,740},{89,143},{862,296},{792,385},{562,774},{233,612},{169,926},{198,239},{44,773},{429,836},{143,261},{936,676},{229,964},{44,560},{385,71},{239,686},{9,138},{641,671},{79,734},{378,295},{362,468},{35,254},{584,445},{169,525},{783,425},{957,978},{407,441},{139,542},{696,149},{174,403},{1000,767},{345,595},{810,687},{259,436},{378,478},{446,187},{109,9},{813,96},{75,762},{738,469},{387,779},{355,860},{793,688},{240,892},{428,732},{630,371},{330,573},{432,862},{174,22},{428,885},{227,615},{216,600},{927,784},{178,304},{7,872},{773,53},{613,678},{634,293},{794,170},{111,454},{426,652},{654,781},{87,212},{420,259},{742,144},{346,423},{95,536},{978,562},{968,962},{441,166},{1,29},{232,701},{415,797},{170,412},{781,220},{698,290},{862,390},{132,35},{730,959},{582,714},{607,602},{15,136},{516,782},{573,888},{737,328},{998,500},{126,238},{508,755},{894,857},{973,208},{827,638},{821,370},{612,341},{719,76},{878,691},{651,831},{914,395},{388,554},{236,828},{128,103},{39,369},{303,450},{522,199},{749,681},{11,278},{734,54},{600,584},{194,269},{310,67},{792,406},{709,825},{11,580},{193,742},{587,419},{894,314},{684,590},{778,685},{620,119},{984,889},{775,127},{645,282},{415,439},{117,795},{768,855},{702,287},{188,725},{950,417},{362,656},{702,553},{746,790},{131,663},{927,598},{120,319},{645,105},{813,382},{582,930},{51,653},{470,36},{501,473},{759,559},{600,723},{329,240},{489,783},{71,878},{737,919},{798,596},{962,675},{685,65},{978,921},{387,100},{1,307},{458,338},{369,808},{900,961},{914,113},{919,120},{212,501},{466,393},{26,561},{598,955},{723,122},{647,737},{806,493},{901,43},{974,821},{453,929},{672,731},{425,606},{865,330},{539,124},{950,713},{553,249},{782,25},{379,42},{80,272},{984,66},{904,315},{779,891},{7,879},{734,292},{290,832},{335,897},{628,142},{611,645},{883,218},{531,265},{278,718},{258,614},{380,535},{755,372},{226,331},{292,11},{168,621},{494,479},{976,101},{302,975},{339,803},{568,710},{745,844},{893,679},{905,231},{180,40},{847,374},{126,455},{555,789},{293,175},{920,6},{368,28},{759,402},{312,896},{402,257},{492,512},{473,981},{912,110},{797,941},{763,523},{325,966},{439,672},{835,509},{658,399},{273,660},{900,556},{239,823},{79,357},{336,154},{334,4},{74,310},{39,27},{897,882},{525,850},{521,163},{758,979},{867,518},{561,494},{459,400},{690,176},{956,45},{626,851},{50,387},{38,346},{39,177},{784,543},{900,704},{854,907},{566,157},{433,683},{25,465},{605,379},{799,80},{706,207},{414,499},{285,183},{126,810},{949,739},{355,64},{637,986},{688,722},{887,995},{601,589},{1,793},{111,619},{857,135},{550,866},{693,588},{942,153},{640,858},{170,668},{455,446},{419,147},{369,1},{182,692},{163,516},{396,869},{376,709},{859,179},{778,753},{509,999},{59,411},{969,603},{630,864},{407,74},{515,260},{807,398},{263,169},{49,719},{289,160},{917,23},{173,447},{110,706},{809,778},{632,146},{363,145},{882,496},{185,167},{735,106},{971,643},{410,544},{321,205},{873,939},{131,316},{297,215},{270,906},{930,457},{274,597},{398,717},{931,305},{843,485},{964,210},{958,861},{918,38},{786,456},{933,636},{862,394},{901,2},{65,730},{352,743},{983,893},{836,186},{923,443},{435,800},{518,365},{755,185},{74,625},{723,309},{282,312},{236,353},{560,203},{107,481},{711,299},{931,527},{518,377},{928,944},{223,57},{41,702},{711,81},{999,308},{327,384},{605,608},{399,298},{370,109},{51,984},{952,352},{353,318},{37,248},{938,708},{942,498},{902,300},{38,351},{213,632},{144,799},{791,845},{85,835},{687,572},{629,350},{104,618},{742,78},{859,89},{632,438},{633,980},{825,963},{866,611},{659,194},{798,786},{727,871},{194,707},{945,405},{592,565},{766,102},{714,420},{61,182},{781,903},{963,917},{492,475},{532,537},{490,332},{901,255},{508,829},{650,184},{723,248},{825,294},{347,368},{263,637},{552,819},{757,934},{805,796},{219,635},{3,591},{444,46},{633,61},{742,839},{242,5},{879,392},{426,460},{235,432},{781,126},{679,920},{904,236},{441,976},{80,994},{255,17},{679,495},{706,55},{612,37},{855,268},{830,827},{669,362},{234,532},{687,715},{509,697},{411,757},{367,433},{245,592},{691,256},{111,950},{363,430},{27,992},{714,874},{802,152},{300,776},{341,104},{34,834},{318,165},{245,682},{976,998},{932,673},{796,12},{402,16},{549,684},{40,462},{351,528},{178,224}
        };
        int[] expected = new int[]{723,248};
        int[] result = solution.findRedundantDirectedConnection(edges);
        System.out.println("result" + result[0] + " " + result[1]);
        assertArrayEquals(expected, result);
    }
}
